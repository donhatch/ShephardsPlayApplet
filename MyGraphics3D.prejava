// Wrapper class for Graphics
// that does a subset of the Graphics2D API
// (But with saner API.)
//
#include "macros.h"

import com.donhatchsw.util.MyMath;
import com.donhatchsw.util.VecMath;

public class MyGraphics3D extends MyGraphics
{
    public MyGraphics3D(java.awt.Graphics g,
                        java.awt.Dimension gsize,
                        double x0, double x1, double y0, double y1,
                        double xform[][])
    {
        super(g, gsize, x0,x1,y0,y1);
        this.xform = xform;
    }

    public void drawLine(double x0, double y0, double z0,
                         double x1, double y1, double z1,
                         boolean antiAlias)
    {
        // XXX use scratch for these
        double p0[] = {x0,y0,z0};
        double p1[] = {x1,y1,z1};
        double q0[] = VecMath.vxm(p0, xform);
        double q1[] = VecMath.vxm(p1, xform);

        double foo0 = eyeDist/(eyeDist+q0[2]);
        q0[0] *= foo0;
        q0[1] *= foo0;
        double foo1 = eyeDist/(eyeDist+q1[2]);
        q1[0] *= foo1;
        q1[1] *= foo1;

        super.drawLine(q0[0], q0[1],
                       q1[0], q1[1],
                       antiAlias);
    } // drawLine
    public void drawLine(double x0, double y0,
                         double x1, double y1,
                         boolean antiAlias)
    {
        drawLine(x0,y0,0.,
                 x1,y1,0.,
                 antiAlias);
    }
    public void drawPoint(double x, double y, double z, int nPixels)
    {
        double p[] = {x,y,z};
        double q[] = VecMath.vxm(p, xform);

        double foo = eyeDist/(eyeDist+q[2]);
        q[0] *= foo;
        q[1] *= foo;
        super.drawPoint(q[0], q[1], nPixels);
    }
    public void drawPoint(double x, double y, int nPixels)
    {
        drawPoint(x, y, 0., nPixels);
    }

    private MyGraphics mg;
    private double xform[][]; // 3d-to-2d xform
    private double eyeDist = 2.;
    private double invEyeDist = 1./eyeDist;
} // class MyGraphics3D
