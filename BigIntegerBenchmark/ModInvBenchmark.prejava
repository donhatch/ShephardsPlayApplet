/*




./RUNME.ModInvBenchmark mine > ! RMME.modInverse.mine
./RUNME.ModInvBenchmark theirs > ! RMME.modInverse.theirs
gnuplot
  gnuplot>
    set log
    plot x*3e-9, x**2*2.5e-10, "RMME.modInverse.mine" using 1:2, "RMME.modInverse.theirs" using 1:2
    plot x*3e-9, x**2*2.5e-10, "RMME.gcd.mine" using 1:2, "RMME.gcd.theirs" using 1:2

*/
#include "macros.h"
import com.donhatchsw.util.VecMath; // XXX get rid
// java.math.BigInteger.invMod is freaky slow, wtf?
public class ModInvBenchmark
{
    private static String describe(java.math.BigInteger x, int maxDigits)
    {
        int bitLength = x.bitLength();
        int numDigits = (int)Math.floor(bitLength * Math.log10(2.)); // approximately
        if (numDigits <= maxDigits)
            return x.toString();
        String answer = "("+numDigits+" digit"+(numDigits==1?"":"s")+" or so)";
        return answer;
    }

    // Extended euclidean algorithm.
    private static java.math.BigInteger gcdExtended(java.math.BigInteger a, java.math.BigInteger b,
                                                    java.math.BigInteger coeffs[])
    {
        java.math.BigInteger ZERO = java.math.BigInteger.ZERO;
        java.math.BigInteger ONE = java.math.BigInteger.ONE;
        java.math.BigInteger aAbs = a.abs();
        java.math.BigInteger bAbs = b.abs();

        // Assuming a,b >= 0,
        // we want x,y such that g = x*a + y*b (then x will be the answer).
        // Start with this:
        //      a = 1*a + 0*b
        //      b = 0*a + 1*b
        // i.e. the augmented matrix:
        //      [a 1 0]
        //      [b 0 1]
        // and do row operations (i.e. add a multiple of one row to the other
        // or swap rows, so that the determinant of the right 2x2 submatrix
        // stays 1 or -1), until the first column is 1,0.
        // The matrix will then look like this:
        //      [g   x   y ]
        //      [0 -b/g a/g]
        // or maybe:
        //      [g   x    y ]
        //      [0  b/g -a/g]
        java.math.BigInteger M[][] = {
            {aAbs, ONE, ZERO},
            {bAbs, ZERO, ONE},
        };
        int nIterations = 0;
        while (M[1][0].signum() != 0) {
            java.math.BigInteger q = M[0][0].divide(M[1][0]);
            // subtract q times row 1 from row 0
            for (int j = 0; j < 3; ++j)
                M[0][j] = M[0][j].subtract(q.multiply(M[1][j]));
            // and swap the rows
            java.math.BigInteger temp[] = M[0]; M[0] = M[1]; M[1] = temp;
            nIterations++;
        }
        //PRINT(nIterations);
        java.math.BigInteger g = M[0][0];
        assert(M[1][1].multiply(g).abs().equals(bAbs));
        assert(M[1][2].multiply(g).abs().equals(aAbs));
        java.math.BigInteger x = M[0][1];
        java.math.BigInteger y = M[0][2];

        // Get x,y as close to 0 as possible:
        // e.g. if x > b/2, then it's better to take x-b instead.
        // we know:
        //     x*a + y*b = g
        // so could also use:
        //     (x-b)*a + (y+a)*b = g
        {
            java.math.BigInteger xAlternate, yAlternate;
            if (x.signum() < 0)
            {
                xAlternate = x.add(bAbs);
                yAlternate = y.subtract(bAbs);
            }
            else
            {
                xAlternate = x.subtract(bAbs);
                yAlternate = y.add(bAbs);
            }
            if (xAlternate.abs().compareTo(x.abs()) < 0)
            {
                x = xAlternate;
                y = yAlternate;
            }
        }

        if (a.signum() < 0) x = x.negate();
        if (b.signum() < 0) y = y.negate();
        assert(a.multiply(x).add(b.multiply(y)).equals(g));
        coeffs[0] = x;
        coeffs[1] = y;
        return g;
    } // gcdExtended

    private static java.math.BigInteger myModInverse(java.math.BigInteger a, java.math.BigInteger b)
    {
        java.math.BigInteger ZERO = java.math.BigInteger.ZERO;
        java.math.BigInteger ONE = java.math.BigInteger.ONE;
        if (b.signum() <= 0)
            throw new ArithmeticException("myModInverse called with b<=0");
        if (b.equals(ONE)) return ZERO; // I guess it's allowed, and a can be anything including 0 in this case; special case it
        a = a.mod(b);  // XXX actually... should I make it as close to 0 as possible? not sure
        java.math.BigInteger coeffs[] = new java.math.BigInteger[2];
        java.math.BigInteger g = gcdExtended(a, b, coeffs);
        if (!g.equals(ONE))
            throw new ArithmeticException("myModInverse called with a,b not relatively prime");
        java.math.BigInteger x = coeffs[0];
        x = x.mod(b);
        return x;
    } // myModInverse

    // what the fuck!? gcd is broken too!? fast for little numbers but not for big ones? e.g. b-1.
    // so actually maybe this is what I need to report, it's a lot simpler.
    private static java.math.BigInteger myGcd(java.math.BigInteger a, java.math.BigInteger b)
    {
        a = a.abs();
        b = b.abs();
        while (true)
        {
            if (b.signum() == 0) return a;
            a = a.mod(b);
            if (a.signum() == 0) return b;
            b = b.mod(a);
        }
    }

    private static void testOneCaseOfModInverse(String aDescription, java.math.BigInteger a, java.math.BigInteger b, boolean useMine)
    {
        System.out.print("    1/"+aDescription+" mod b = ");
        System.out.flush();
        long t0nanos = System.nanoTime();

        java.math.BigInteger aInverse = useMine ? myModInverse(a, b)
                                                : a.modInverse(b);

        long t1nanos = System.nanoTime();
        System.out.println(""+describe(aInverse, 100)+" in "+(t1nanos-t0nanos)/1e9+" secs.");
        System.out.flush();
    }

    private static void testOneCaseOfGcd(String aDescription, java.math.BigInteger a, java.math.BigInteger b, boolean useMine)
    {
        System.out.print("    gcd("+aDescription+", b) = ");
        System.out.flush();
        long t0nanos = System.nanoTime();

        java.math.BigInteger aInverse = useMine ? myModInverse(a, b)
                                                : a.modInverse(b);

        long t1nanos = System.nanoTime();
        System.out.println(""+describe(aInverse, 100)+" in "+(t1nanos-t0nanos)/1e9+" secs.");
        System.out.flush();
    }

    private static void testOneCase(String aDescription, java.math.BigInteger a, java.math.BigInteger b, boolean useMine)
    {
        //return testOneCaseOfModInverse(aDescription, a, b, useMine);
        testOneCaseOfGcd(aDescription, a, b, useMine);
    }

    public static void main(String args[])
    {

        java.math.BigInteger ZERO = java.math.BigInteger.ZERO;
        java.math.BigInteger ONE = java.math.BigInteger.ONE;
        java.math.BigInteger TEN = java.math.BigInteger.TEN;

        if (false)
        {
            boolean useMine = false; // XXX make a param
            int bNumZeros = args.length>=1 ? Integer.parseInt(args[0]) : 1000000;
            PRINT(bNumZeros);


            long t0nanos, t1nanos;
            // b is 1 followed by a million (or however many) zeros.
            System.out.print("Creating b...");
            System.out.flush();
            t0nanos = System.nanoTime();
            java.math.BigInteger b = TEN.pow(bNumZeros);
            t1nanos = System.nanoTime();
            System.out.println("done in "+(t1nanos-t0nanos)/1e9+" secs.");
            System.out.flush();
            System.out.println("b = "+describe(b, 1000));

            // Some small numbers...
            for (int i = -20; i <= 20; ++i)
            {
                java.math.BigInteger a = java.math.BigInteger.valueOf(i);
                if (myGcd(a,b).equals(ONE))
                    testOneCase(a.toString(), a, b, useMine);
            }
            // Increasing numbers of zeros
            for (int aNumZeros = 1; aNumZeros < bNumZeros; aNumZeros *= 10)
            {
                java.math.BigInteger a = TEN.pow(aNumZeros);
                while (!myGcd(a,b).equals(ONE)) a = a.add(ONE);
                testOneCase("(10^"+aNumZeros+" or so)", a, b, useMine);
            }
            // Something around b/2
            {
                java.math.BigInteger a = b.divide(java.math.BigInteger.valueOf(2));
                while (!myGcd(a,b).equals(ONE)) a = a.add(ONE);
                testOneCase("(b/2 or so)", a, b, useMine);
            }
            // Some numbers around b
            for (int i = -20; i <= 20; ++i)
            {
                java.math.BigInteger a = b.add(java.math.BigInteger.valueOf(i));
                if (myGcd(a,b).equals(ONE))
                    testOneCase(i < 0 ? "(b - "+(-i)+")"
                               : "(b + "+i+")", a, b, useMine);
            }

            // Some number in golden ratio to b.
            // It's basically impossible to get this simply;
            // we'd need to be able to perform a square root,
            // which is just as hard as the subsequent gcd.
            // Oh wait! That's not true.  We can
            // exponentiate that 2x2 matrix....
            {
                double phi = (Math.sqrt(5.)+1)/2.;
                long denominator = 1L << 62;
                long numerator = (long)(phi * (double)denominator);
                PRINT(phi);
                PRINT((double)numerator/(double)denominator);
                java.math.BigInteger a = b.multiply(java.math.BigInteger.valueOf(denominator)).divide(java.math.BigInteger.valueOf(numerator));
                while (!myGcd(a,b).equals(ONE)) a = a.add(ONE);
                testOneCase("(b/phi)", a, b, useMine);
            }

            // Random number less than b.
            // Hmm, actually, this gives a good test case.
            {
                java.math.BigInteger a = new java.math.BigInteger(b.bitLength()-1, new java.util.Random());
                while (!myGcd(a,b).equals(ONE)) a = a.add(ONE);
                testOneCase("(random less than b)", a, b, useMine);
            }
        }

        if (true)
        {
            boolean useMine = false;
            if (args.length==1 && args[0].equals("theirs"))
                useMine = false;
            else if (args.length==1 && args[0].equals("mine"))
                useMine = true;
            else
            {
                System.err.println("Usage: whatever theirs|mine");
                System.exit(1);
            }

            java.math.BigInteger a = java.math.BigInteger.valueOf(3);
            for (int bNumZeros = 0; bNumZeros < 1000*1000; bNumZeros += 10000)
            {
                java.math.BigInteger b = TEN.pow(bNumZeros);
                System.out.print(bNumZeros+" ");
                System.out.flush();

                long t0nanos = System.nanoTime();
                java.math.BigInteger aInverse = useMine ? myModInverse(a, b)
                                                        : a.modInverse(b);
                long t1nanos = System.nanoTime();
                System.out.println(""+(t1nanos-t0nanos)/1e9+" secs: "+describe(aInverse, 100));
                System.out.flush();
            }
        }
    } // main
} // class ModInvBenchmark
