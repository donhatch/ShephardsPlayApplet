/** Convenience because I'm getting annoyed at the verbosity of native BigInteger idiomatic usage. */
public class BigInt
{
    /** Simple static conveniences for working with java.math.BigInteger directly. */
    public static boolean eq(java.math.BigInteger a, java.math.BigInteger b) { return a.compareTo(b) == 0; }
    public static boolean ne(java.math.BigInteger a, java.math.BigInteger b) { return a.compareTo(b) != 0; }
    public static boolean lt(java.math.BigInteger a, java.math.BigInteger b) { return a.compareTo(b) < 0; }
    public static boolean gt(java.math.BigInteger a, java.math.BigInteger b) { return a.compareTo(b) > 0; }
    public static boolean le(java.math.BigInteger a, java.math.BigInteger b) { return a.compareTo(b) <= 0; }
    public static boolean ge(java.math.BigInteger a, java.math.BigInteger b) { return a.compareTo(b) >= 0; }
    public static boolean eq(java.math.BigInteger a, long b) { return eq(a, java.math.BigInteger.valueOf(b)); }
    public static boolean ne(java.math.BigInteger a, long b) { return ne(a, java.math.BigInteger.valueOf(b)); }
    public static boolean lt(java.math.BigInteger a, long b) { return lt(a, java.math.BigInteger.valueOf(b)); }
    public static boolean gt(java.math.BigInteger a, long b) { return gt(a, java.math.BigInteger.valueOf(b)); }
    public static boolean le(java.math.BigInteger a, long b) { return le(a, java.math.BigInteger.valueOf(b)); }
    public static boolean ge(java.math.BigInteger a, long b) { return ge(a, java.math.BigInteger.valueOf(b)); }
    public static java.math.BigInteger plus(java.math.BigInteger a, long b) { return a.add(java.math.BigInteger.valueOf(b)); }
    public static java.math.BigInteger times(java.math.BigInteger a, long b) { return a.multiply(java.math.BigInteger.valueOf(b)); }

    /**
    * More convenient object for when accumulating.
    * Example:
    *         int n = 100;
    *         BigInt factorial = new BigInt(1);
    *         //for (BigInt i = new BigInt(1); i.le(n); i.plusEquals(1)) // this way works too
    *         for (int i = 1; i <= n; ++i)
    *             factorial.timesEquals(i);
    *         String binaryBackwards = "";
    *         while (factorial.gt(0))
    *         {
    *             int remainder = factorial.divEqualsReturningRemainder(2);
    *             binaryBackwards += remainder;
    *         }
    *         System.out.println(""+n+"! in binary backwards is "+binaryBackwards);
    */
    public java.math.BigInteger i;
    public BigInt(java.math.BigInteger i) { this.i = i; }
    public BigInt(long i) { this(java.math.BigInteger.valueOf(i)); }

    public BigInt copy() { return new BigInt(this.i); }

    public boolean eq(BigInt that) { return eq(this.i, that.i); }
    public boolean ne(BigInt that) { return ne(this.i, that.i); }
    public boolean lt(BigInt that) { return lt(this.i, that.i); }
    public boolean gt(BigInt that) { return gt(this.i, that.i); }
    public boolean le(BigInt that) { return le(this.i, that.i); }
    public boolean ge(BigInt that) { return ge(this.i, that.i); }
    public boolean eq(long that) { return eq(this.i, that); }
    public boolean ne(long that) { return ne(this.i, that); }
    public boolean lt(long that) { return lt(this.i, that); }
    public boolean gt(long that) { return gt(this.i, that); }
    public boolean le(long that) { return le(this.i, that); }
    public boolean ge(long that) { return ge(this.i, that); }
    public BigInt plusEquals(long that) { this.i = plus(this.i, that); return this; }
    public BigInt timesEquals(long that) { this.i = times(this.i, that); return this; }
    public int intValue() { return i.intValue(); }
    public long longValue() { return i.longValue(); }
    public int divEqualsReturningRemainder(int that) {
        java.math.BigInteger quotientAndRemainder[/*2*/] = this.i.divideAndRemainder(java.math.BigInteger.valueOf(that));
        this.i = quotientAndRemainder[0];
        return quotientAndRemainder[1].intValue();
    }
    public long divEqualsReturningRemainder(long that) {
        java.math.BigInteger quotientAndRemainder[/*2*/] = this.i.divideAndRemainder(java.math.BigInteger.valueOf(that));
        this.i = quotientAndRemainder[0];
        return quotientAndRemainder[1].longValue();
    }
} // BigInt
